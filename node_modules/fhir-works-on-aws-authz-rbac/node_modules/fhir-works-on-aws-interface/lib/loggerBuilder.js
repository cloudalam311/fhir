"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLogger = void 0;
const winston_1 = require("winston");
const winston_transport_1 = __importDefault(require("winston-transport"));
class SimpleConsole extends winston_transport_1.default {
    log(info, callback) {
        setImmediate(() => this.emit('logged', info));
        const msg = [info.meta, info.message];
        if (info[Symbol.for('splat')]) {
            msg.push(...info[Symbol.for('splat')]);
        }
        // Use console here so request ID and log level can be automatically attached in CloudWatch log
        /* eslint-disable no-console */
        switch (info[Symbol.for('level')]) {
            case 'debug':
                console.debug(...msg);
                break;
            case 'info':
                console.info(...msg);
                break;
            case 'warn':
                console.warn(...msg);
                break;
            case 'error':
                console.error(...msg);
                break;
            default:
                console.log(...msg);
                break;
        }
        /* eslint-enable no-console */
        if (callback) {
            callback();
        }
    }
}
// eslint-disable-next-line import/prefer-default-export
function makeLogger(metadata, logLevel = process.env.LOG_LEVEL) {
    return winston_1.createLogger({
        level: logLevel,
        transports: [new SimpleConsole()],
        defaultMeta: { meta: metadata },
    });
}
exports.makeLogger = makeLogger;
//# sourceMappingURL=loggerBuilder.js.map