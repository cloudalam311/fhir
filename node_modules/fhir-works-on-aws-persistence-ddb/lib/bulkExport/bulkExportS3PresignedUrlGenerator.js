"use strict";
/*
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  SPDX-License-Identifier: Apache-2.0
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkExportS3PresignedUrlGenerator = void 0;
const AWS_1 = __importDefault(require("../AWS"));
const EXPIRATION_TIME_SECONDS = 1800;
const EXPORT_CONTENT_TYPE = 'application/fhir+ndjson';
const EXPORT_RESULTS_SIGNER_ROLE_ARN = process.env.EXPORT_RESULTS_SIGNER_ROLE_ARN || '';
class BulkExportS3PresignedUrlGenerator {
    constructor() {
        this.stsClient = new AWS_1.default.STS();
    }
    async getUrls({ s3Keys, exportBucket }) {
        const assumeRoleResponse = await this.stsClient
            .assumeRole({
            RoleArn: EXPORT_RESULTS_SIGNER_ROLE_ARN,
            RoleSessionName: 'signBulkExportResults',
            DurationSeconds: EXPIRATION_TIME_SECONDS,
        })
            .promise();
        const s3 = new AWS_1.default.S3({
            credentials: {
                accessKeyId: assumeRoleResponse.Credentials.AccessKeyId,
                secretAccessKey: assumeRoleResponse.Credentials.SecretAccessKey,
                sessionToken: assumeRoleResponse.Credentials.SessionToken,
            },
        });
        const urls = await Promise.all(s3Keys.map(async (key) => s3.getSignedUrlPromise('getObject', {
            Bucket: exportBucket,
            Key: key,
            Expires: EXPIRATION_TIME_SECONDS,
            ResponseContentType: EXPORT_CONTENT_TYPE,
        })));
        return {
            requiresAccessToken: false,
            urls,
        };
    }
}
exports.BulkExportS3PresignedUrlGenerator = BulkExportS3PresignedUrlGenerator;
//# sourceMappingURL=bulkExportS3PresignedUrlGenerator.js.map