"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startJobExecution = exports.getBulkExportResults = void 0;
/*
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  SPDX-License-Identifier: Apache-2.0
 */
const AWS_1 = __importDefault(require("../AWS"));
const EXPORT_RESULTS_BUCKET = process.env.EXPORT_RESULTS_BUCKET || ' ';
const EXPORT_STATE_MACHINE_ARN = process.env.EXPORT_STATE_MACHINE_ARN || '';
const getFiles = async (prefix) => {
    const s3 = new AWS_1.default.S3();
    const listObjectsResult = await s3.listObjectsV2({ Bucket: EXPORT_RESULTS_BUCKET, Prefix: prefix }).promise();
    return listObjectsResult.Contents.map((x) => x.Key);
};
const getResourceType = (key, prefix) => {
    const regex = new RegExp(`^${prefix}/([A-Za-z]+)-\\d+.ndjson$`);
    const match = regex.exec(key);
    if (match === null) {
        throw new Error(`Could not parse the name of bulk exports result file: ${key}`);
    }
    return match[1];
};
const getBulkExportResults = async (bulkExportResultsUrlGenerator, jobId, tenantId) => {
    const prefix = tenantId ? `${tenantId}/${jobId}` : jobId;
    const keys = await getFiles(prefix);
    const resultUrls = await bulkExportResultsUrlGenerator.getUrls({
        exportBucket: EXPORT_RESULTS_BUCKET,
        s3Keys: keys,
    });
    return {
        requiresAccessToken: resultUrls.requiresAccessToken,
        exportedFileUrls: resultUrls.urls.map((url, i) => ({
            url,
            type: getResourceType(keys[i], prefix),
        })),
    };
};
exports.getBulkExportResults = getBulkExportResults;
const startJobExecution = async (bulkExportJob) => {
    const { jobId, jobOwnerId, exportType, groupId, type, transactionTime, outputFormat, since, tenantId, serverUrl, compartmentSearchParamFile, } = bulkExportJob;
    const params = {
        jobId,
        jobOwnerId,
        exportType,
        transactionTime,
        since,
        outputFormat,
    };
    if (groupId) {
        params.groupId = groupId;
        params.serverUrl = serverUrl;
        params.compartmentSearchParamFile = compartmentSearchParamFile;
    }
    if (type) {
        params.type = type;
    }
    if (tenantId) {
        params.tenantId = tenantId;
    }
    await new AWS_1.default.StepFunctions()
        .startExecution({
        stateMachineArn: EXPORT_STATE_MACHINE_ARN,
        name: jobId,
        input: JSON.stringify(params),
    })
        .promise();
};
exports.startJobExecution = startJobExecution;
//# sourceMappingURL=bulkExport.js.map