"use strict";
/*
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  SPDX-License-Identifier: Apache-2.0
 *
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DdbToEsSync = void 0;
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const ddbToEsHelper_1 = __importDefault(require("./ddbToEsHelper"));
const loggerBuilder_1 = __importDefault(require("../loggerBuilder"));
const logger = (0, loggerBuilder_1.default)();
const BINARY_RESOURCE = 'binary';
function isBinaryResource(image) {
    const resourceType = image.resourceType.toLowerCase();
    // Don't index binary files
    return resourceType === BINARY_RESOURCE;
}
function generateAlias(ddbImage) {
    const { resourceType, _tenantId } = ddbImage;
    const lowercaseResourceType = resourceType.toLowerCase();
    if (_tenantId) {
        return `${lowercaseResourceType}-alias-tenant-${_tenantId}`;
    }
    return `${lowercaseResourceType}-alias`;
}
function generateIndexName(ddbImage) {
    const { resourceType } = ddbImage;
    return resourceType.toLowerCase();
}
function getAlias(ddbImage) {
    return {
        alias: generateAlias(ddbImage),
        index: generateIndexName(ddbImage),
    };
}
class DdbToEsSync {
    constructor({ esClient, getAliasFn = getAlias, disableIndexAndAliasCreation = false, } = {}) {
        this.ddbToEsHelper = new ddbToEsHelper_1.default({ esClient });
        this.disableIndexAndAliasCreation = disableIndexAndAliasCreation;
        this.getAliasFn = getAliasFn;
        this.knownAliases = new Set();
    }
    async handleDDBStreamEvent(event) {
        try {
            const idToCommand = {};
            const aliasesToCreate = [];
            for (let i = 0; i < event.Records.length; i += 1) {
                const record = event.Records[i];
                logger.debug('EventName: ', record.eventName);
                const removeResource = this.ddbToEsHelper.isRemoveResource(record);
                const ddbJsonImage = removeResource ? record.dynamodb.OldImage : record.dynamodb.NewImage;
                const image = aws_sdk_1.default.DynamoDB.Converter.unmarshall(ddbJsonImage);
                logger.debug(image);
                // Don't index binary files
                if (isBinaryResource(image)) {
                    // eslint-disable-next-line no-continue
                    continue;
                }
                const alias = this.getAliasFn(image);
                if (!this.knownAliases.has(alias.alias)) {
                    aliasesToCreate.push(alias);
                }
                const cmd = removeResource
                    ? this.ddbToEsHelper.createBulkESDelete(image, alias.alias)
                    : this.ddbToEsHelper.createBulkESUpsert(image, alias.alias);
                if (cmd) {
                    // Note this will overwrite the item if present
                    // DDB streams guarantee in-order delivery of all mutations to each item
                    // Meaning the last record in the event stream is the "newest"
                    idToCommand[cmd.id] = cmd;
                }
            }
            if (!this.disableIndexAndAliasCreation) {
                await this.ddbToEsHelper.createIndexAndAliasIfNotExist(aliasesToCreate);
                // update cache of all known aliases
                aliasesToCreate.forEach((alias) => this.knownAliases.add(alias.alias));
            }
            await this.ddbToEsHelper.executeEsCmds(Object.values(idToCommand));
        }
        catch (e) {
            logger.error('Synchronization failed! The resources that could be effected are: ', event.Records.map((record) => {
                const image = this.ddbToEsHelper.isRemoveResource(record)
                    ? record.dynamodb.OldImage
                    : record.dynamodb.NewImage;
                return `{id: ${image.id.S}, vid: ${image.vid.N}}`;
            }));
            logger.error('Failed to update ES records', e);
            throw e;
        }
    }
}
exports.DdbToEsSync = DdbToEsSync;
//# sourceMappingURL=ddbToEsSync.js.map