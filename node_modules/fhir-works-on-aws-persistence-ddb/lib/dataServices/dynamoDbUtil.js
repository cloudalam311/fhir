"use strict";
/*
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  SPDX-License-Identifier: Apache-2.0
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamoDbUtil = exports.buildHashKey = exports.SUBSCRIPTION_FIELD = exports.INTERNAL_ID_FIELD = exports.TENANT_ID_FIELD = exports.REFERENCES_FIELD = exports.VID_FIELD = exports.LOCK_END_TS_FIELD = exports.DOCUMENT_STATUS_FIELD = void 0;
const fhir_works_on_aws_interface_1 = require("fhir-works-on-aws-interface");
const flat_1 = __importDefault(require("flat"));
const constants_1 = require("../constants");
exports.DOCUMENT_STATUS_FIELD = 'documentStatus';
exports.LOCK_END_TS_FIELD = 'lockEndTs';
exports.VID_FIELD = 'vid';
exports.REFERENCES_FIELD = '_references';
exports.TENANT_ID_FIELD = '_tenantId';
exports.INTERNAL_ID_FIELD = '_id';
exports.SUBSCRIPTION_FIELD = '_subscriptionStatus';
const buildHashKey = (id, tenantId) => {
    if (tenantId) {
        return `${tenantId}|${id}`;
    }
    return id;
};
exports.buildHashKey = buildHashKey;
class DynamoDbUtil {
    static cleanItem(item) {
        const cleanedItem = (0, fhir_works_on_aws_interface_1.clone)(item);
        delete cleanedItem[exports.DOCUMENT_STATUS_FIELD];
        delete cleanedItem[exports.LOCK_END_TS_FIELD];
        delete cleanedItem[exports.VID_FIELD];
        delete cleanedItem[exports.REFERENCES_FIELD];
        delete cleanedItem[exports.SUBSCRIPTION_FIELD];
        // Return id instead of full id (this is only a concern in results from ES)
        const id = item.id.split(constants_1.SEPARATOR)[0];
        cleanedItem.id = id;
        if (cleanedItem.id.includes(constants_1.DDB_HASH_KEY_SEPARATOR)) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const [tenantId, resourceId] = cleanedItem.id.split(constants_1.DDB_HASH_KEY_SEPARATOR);
            if (resourceId === undefined) {
                throw new Error(`Invalid schema for resource Id: ${cleanedItem.id}`);
            }
            cleanedItem.id = resourceId;
        }
        delete cleanedItem[exports.TENANT_ID_FIELD];
        delete cleanedItem[exports.INTERNAL_ID_FIELD];
        return cleanedItem;
    }
    static prepItemForDdbInsert(resource, id, vid, documentStatus, tenantId) {
        const item = (0, fhir_works_on_aws_interface_1.clone)(resource);
        item.id = (0, exports.buildHashKey)(id, tenantId);
        item.vid = vid;
        // versionId and lastUpdated for meta object should be system generated
        const { versionId, lastUpdated } = (0, fhir_works_on_aws_interface_1.generateMeta)(vid.toString());
        if (!item.meta) {
            item.meta = { versionId, lastUpdated };
        }
        else {
            item.meta = { ...item.meta, versionId, lastUpdated };
        }
        item[exports.DOCUMENT_STATUS_FIELD] = documentStatus;
        item[exports.LOCK_END_TS_FIELD] = Date.now();
        const activeSubscription = (documentStatus === "AVAILABLE" /* AVAILABLE */ || documentStatus === "PENDING" /* PENDING */) &&
            resource.resourceType === 'Subscription' &&
            (resource.status === 'active' || resource.status === 'requested');
        if (activeSubscription) {
            item[exports.SUBSCRIPTION_FIELD] = 'active';
            item.status = 'active';
        }
        if (tenantId) {
            item[exports.TENANT_ID_FIELD] = tenantId;
            item[exports.INTERNAL_ID_FIELD] = id;
        }
        // Format of flattenedResource
        // https://www.npmjs.com/package/flat
        // flatten({ key1: { keyA: 'valueI' } })  => { key1.keyA: 'valueI'}
        const flattenedResources = (0, flat_1.default)(resource);
        const references = Object.keys(flattenedResources)
            .filter((key) => {
            return key.endsWith('.reference');
        })
            .map((key) => {
            return flattenedResources[key];
        });
        item[exports.REFERENCES_FIELD] = references;
        return item;
    }
}
exports.DynamoDbUtil = DynamoDbUtil;
//# sourceMappingURL=dynamoDbUtil.js.map