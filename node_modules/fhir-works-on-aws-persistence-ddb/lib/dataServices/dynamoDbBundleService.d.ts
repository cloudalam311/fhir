import DynamoDB from 'aws-sdk/clients/dynamodb';
import { BatchRequest, TransactionRequest, BundleResponse, Bundle } from 'fhir-works-on-aws-interface';
export declare class DynamoDbBundleService implements Bundle {
    private readonly MAX_TRANSACTION_SIZE;
    private readonly ELAPSED_TIME_WARNING_MESSAGE;
    readonly updateCreateSupported: boolean;
    private dynamoDbHelper;
    private dynamoDb;
    private readonly maxExecutionTimeMs;
    readonly enableMultiTenancy: boolean;
    private static readonly dynamoDbMaxTransactionBundleSize;
    private readonly maxBatchSize;
    private readonly versionedLinks;
    /**
     *
     * @param dynamoDb
     * @param supportUpdateCreate
     * @param maxExecutionTimeMs
     * @param options.enableMultiTenancy - whether or not to enable multi-tenancy. When enabled a tenantId is required for all requests.
     * @param options.versionedLinks Data structure to control for which resourceTypes (key) which references (array of paths) should be modified,
     * so that they point to the current (point in time) version of the referenced resource.
     * For example:
     *  {
     *      "ExplanationOfBenefit": [ "careTeam.reference" ]
     *  }
     * says: for resource type ExplanationOfBenefit, make sure the careTeam.reference url points to the current
     * version of the practitioner resource.
     * For example, that would mean the reference would be corrected to: `{fhirURl}/Practitioner/1234/_history/<vid>`; instead of the default: `{fhirURl}/Practitioner/1234`
     * @param options.maxBatchSize This is to allow for customization of the default max size of a Batch Bundle. By default, this is 750.
     * */
    constructor(dynamoDb: DynamoDB, supportUpdateCreate?: boolean, maxExecutionTimeMs?: number, { enableMultiTenancy, versionedLinks, maxBatchSize, }?: {
        enableMultiTenancy?: boolean;
        versionedLinks?: Record<string, string[]>;
        maxBatchSize?: Number;
    });
    private assertValidTenancyMode;
    batch(request: BatchRequest): Promise<BundleResponse>;
    transaction(request: TransactionRequest): Promise<BundleResponse>;
    private lockItems;
    private updatedReferences;
    private unlockItems;
    private rollbackItems;
    private generateFullId;
    private removeLocksFromArray;
    private stageItems;
    private getElapsedTime;
}
