"use strict";
/*
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *  SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
const dynamoDb_1 = require("./dynamoDb");
const dynamoDbUtil_1 = require("./dynamoDbUtil");
const EXPORT_INTERNAL_ID_FIELD = '_jobId';
class DynamoDbParamBuilder {
    static buildUpdateDocumentStatusParam(oldStatus, newStatus, id, vid, resourceType, tenantId) {
        const currentTs = Date.now();
        let futureEndTs = currentTs;
        if (newStatus === "LOCKED" /* LOCKED */) {
            futureEndTs = currentTs + this.LOCK_DURATION_IN_MS;
        }
        let updateExpression = `set ${dynamoDbUtil_1.DOCUMENT_STATUS_FIELD} = :newStatus, ${dynamoDbUtil_1.LOCK_END_TS_FIELD} = :futureEndTs`;
        let conditionExpression = `resourceType = :resourceType`;
        let expressionAttributeNames;
        let expressionAttributeValues = {
            ':newStatus': newStatus,
            ':futureEndTs': futureEndTs,
            ':resourceType': resourceType,
        };
        if (oldStatus) {
            conditionExpression = `resourceType = :resourceType AND (${dynamoDbUtil_1.DOCUMENT_STATUS_FIELD} = :oldStatus OR (${dynamoDbUtil_1.LOCK_END_TS_FIELD} < :currentTs AND (${dynamoDbUtil_1.DOCUMENT_STATUS_FIELD} = :lockStatus OR ${dynamoDbUtil_1.DOCUMENT_STATUS_FIELD} = :pendingStatus OR ${dynamoDbUtil_1.DOCUMENT_STATUS_FIELD} = :pendingDeleteStatus)))`;
            expressionAttributeValues = {
                ':newStatus': newStatus,
                ':oldStatus': oldStatus,
                ':lockStatus': "LOCKED" /* LOCKED */,
                ':pendingStatus': "PENDING" /* PENDING */,
                ':pendingDeleteStatus': "PENDING_DELETE" /* PENDING_DELETE */,
                ':currentTs': currentTs,
                ':futureEndTs': futureEndTs,
                ':resourceType': resourceType,
            };
        }
        if (resourceType === 'Subscription') {
            if (newStatus === "PENDING_DELETE" /* PENDING_DELETE */ || newStatus === "DELETED" /* DELETED */) {
                updateExpression = `${updateExpression} REMOVE #subscriptionStatus`;
            }
            else {
                updateExpression = `${updateExpression}, #subscriptionStatus = :subscriptionStatus`;
                expressionAttributeValues[':subscriptionStatus'] = 'active';
            }
            expressionAttributeNames = { '#subscriptionStatus': `${dynamoDbUtil_1.SUBSCRIPTION_FIELD}` };
        }
        const params = {
            Update: {
                TableName: dynamoDb_1.RESOURCE_TABLE,
                Key: dynamoDb_1.DynamoDBConverter.marshall({
                    id: (0, dynamoDbUtil_1.buildHashKey)(id, tenantId),
                    vid,
                }),
                UpdateExpression: updateExpression,
                ExpressionAttributeValues: dynamoDb_1.DynamoDBConverter.marshall(expressionAttributeValues),
                ConditionExpression: conditionExpression,
            },
        };
        if (expressionAttributeNames) {
            params.Update.ExpressionAttributeNames = expressionAttributeNames;
        }
        return params;
    }
    static buildGetResourcesQueryParam(id, resourceType, maxNumberOfVersions, projectionExpression, tenantId) {
        const params = {
            TableName: dynamoDb_1.RESOURCE_TABLE,
            ScanIndexForward: false,
            Limit: maxNumberOfVersions,
            FilterExpression: '#r = :resourceType',
            KeyConditionExpression: 'id = :hkey',
            ExpressionAttributeNames: { '#r': 'resourceType' },
            ExpressionAttributeValues: dynamoDb_1.DynamoDBConverter.marshall({
                ':hkey': (0, dynamoDbUtil_1.buildHashKey)(id, tenantId),
                ':resourceType': resourceType,
            }),
        };
        if (projectionExpression) {
            // @ts-ignore
            params.ProjectionExpression = projectionExpression;
        }
        return params;
    }
    static buildDeleteParam(id, vid, tenantId) {
        const params = {
            Delete: {
                TableName: dynamoDb_1.RESOURCE_TABLE,
                Key: dynamoDb_1.DynamoDBConverter.marshall({
                    id: (0, dynamoDbUtil_1.buildHashKey)(id, tenantId),
                    vid,
                }),
            },
        };
        return params;
    }
    static buildGetItemParam(id, vid, tenantId) {
        return {
            TableName: dynamoDb_1.RESOURCE_TABLE,
            Key: dynamoDb_1.DynamoDBConverter.marshall({
                id: (0, dynamoDbUtil_1.buildHashKey)(id, tenantId),
                vid,
            }),
        };
    }
    /**
     * Build DDB PUT param to insert a new resource
     * @param item - The object to be created and stored in DDB
     * @param allowOverwriteId - Allow overwriting a resource with the same id
     * @return DDB params for PUT operation
     */
    static buildPutAvailableItemParam(item, id, vid, allowOverwriteId = false, tenantId) {
        const newItem = dynamoDbUtil_1.DynamoDbUtil.prepItemForDdbInsert(item, id, vid, "AVAILABLE" /* AVAILABLE */, tenantId);
        const param = {
            TableName: dynamoDb_1.RESOURCE_TABLE,
            Item: dynamoDb_1.DynamoDBConverter.marshall(newItem),
        };
        if (!allowOverwriteId) {
            param.ConditionExpression = 'attribute_not_exists(id)';
        }
        return param;
    }
    static buildPutCreateExportRequest(bulkExportJob, initiateExportRequest) {
        var _a;
        const newItem = { ...bulkExportJob };
        if (newItem.tenantId) {
            newItem[EXPORT_INTERNAL_ID_FIELD] = newItem.jobId;
            newItem.jobId = (0, dynamoDbUtil_1.buildHashKey)(newItem.jobId, newItem.tenantId);
        }
        // Remove fields not needed
        delete newItem.serverUrl;
        delete newItem.fhirVersion;
        delete newItem.allowedResourceTypes;
        // Set type back to user input value
        newItem.type = (_a = initiateExportRequest.type) !== null && _a !== void 0 ? _a : '';
        return {
            TableName: dynamoDb_1.EXPORT_REQUEST_TABLE,
            Item: dynamoDb_1.DynamoDBConverter.marshall(newItem),
        };
    }
    static buildQueryExportRequestJobStatus(jobStatus, projectionExpression) {
        const params = {
            TableName: dynamoDb_1.EXPORT_REQUEST_TABLE,
            KeyConditionExpression: 'jobStatus = :hkey',
            ExpressionAttributeValues: dynamoDb_1.DynamoDBConverter.marshall({
                ':hkey': jobStatus,
            }),
            IndexName: dynamoDb_1.EXPORT_REQUEST_TABLE_JOB_STATUS_INDEX,
        };
        if (projectionExpression) {
            // @ts-ignore
            params.ProjectionExpression = projectionExpression;
        }
        return params;
    }
    static buildUpdateExportRequestJobStatus(jobId, jobStatus, tenantId) {
        const hashKey = (0, dynamoDbUtil_1.buildHashKey)(jobId, tenantId);
        const params = {
            TableName: dynamoDb_1.EXPORT_REQUEST_TABLE,
            Key: dynamoDb_1.DynamoDBConverter.marshall({
                jobId: hashKey,
            }),
            UpdateExpression: 'set jobStatus = :newStatus',
            ConditionExpression: 'jobId = :jobIdVal',
            ExpressionAttributeValues: dynamoDb_1.DynamoDBConverter.marshall({
                ':newStatus': jobStatus,
                ':jobIdVal': hashKey,
            }),
        };
        return params;
    }
    static buildGetExportRequestJob(jobId, tenantId) {
        const params = {
            TableName: dynamoDb_1.EXPORT_REQUEST_TABLE,
            Key: dynamoDb_1.DynamoDBConverter.marshall({
                jobId: (0, dynamoDbUtil_1.buildHashKey)(jobId, tenantId),
            }),
        };
        return params;
    }
    static buildGetActiveSubscriptions(tenantId) {
        const params = {
            TableName: dynamoDb_1.RESOURCE_TABLE,
            IndexName: 'activeSubscriptions',
            KeyConditionExpression: '#subscriptionStatus = :active',
            ExpressionAttributeValues: dynamoDb_1.DynamoDBConverter.marshall({
                ':active': 'active',
            }),
            ExpressionAttributeNames: {
                '#subscriptionStatus': '_subscriptionStatus',
            },
        };
        if (tenantId) {
            params.KeyConditionExpression += ' AND begins_with(id,:tenantId)';
            params.ExpressionAttributeValues = dynamoDb_1.DynamoDBConverter.marshall({
                ':active': 'active',
                ':tenantId': tenantId,
            });
        }
        return params;
    }
}
exports.default = DynamoDbParamBuilder;
DynamoDbParamBuilder.LOCK_DURATION_IN_MS = 35 * 1000;
//# sourceMappingURL=dynamoDbParamBuilder.js.map